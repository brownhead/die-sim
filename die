#!/usr/bin/env python

import random, re, collections, readline

RollInfo = collections.namedtuple(
    "RollInfo",
    "input,num_rolls,max_value,plus,advantage,critical")

class Roll(object):
    def individual_rolls(self):
        raise NotImplemented()

    def value(self):
        raise NotImplemented()

class AdvantagedRoll(Roll):
    def __init__(self, first, second):
        self.first = first
        self.second = second

    def individual_rolls(self):
        return [self.first, self.second]

    def value(self):
        return max(self.first, self.second)

    def __repr__(self):
        if self.first >= self.second:
            return "{} (dropped {})".format(self.first, self.second)
        else:
            return "(dropped {}) {}".format(self.first, self.second)

class DisadvantagedRoll(Roll):
    def __init__(self, first, second):
        self.first = first
        self.second = second

    def individual_rolls(self):
        return [self.first, self.second]

    def value(self):
        return min(self.first, self.second)

    def __repr__(self):
        if self.first <= self.second:
            return "{} (dropped {})".format(self.first, self.second)
        else:
            return "(dropped {}) {}".format(self.first, self.second)

ADVANTAGE = 1
DISADVANTAGE = 2
def parse_raw_advantage(advantage):
    if advantage is None:
        return None

    advantage = advantage.strip()
    if advantage == "adv" or advantage == "advantage":
        return ADVANTAGE
    elif advantage == "dis" or advantage == "disadvantage":
        return DISADVANTAGE
    else:
        return None

INPUT_RE = re.compile(
    "^([0-9]+)?d([0-9]+)([+-][0-9]+)?"
    "( adv(?:antage)?| dis(?:advantage)?)?"
    "( crit(?:ical)?)?$")
def parse_input(user_input):
    split_raw = [i.strip() for i in user_input.split(",")]
    for i in split_raw:
        match = INPUT_RE.match(i)
        if match is None:
            yield i
            continue

        # Parse out the interesting values
        num_rolls, max_value, plus, advantage, critical = match.groups()
        yield RollInfo(
            input=i,
            num_rolls=int(num_rolls or 1),
            max_value=int(max_value),
            plus=int(plus or 0),
            advantage=parse_raw_advantage(advantage),
            critical=critical is not None)


def make_rolls(roll_info):
    def roll():
        return random.choice(range(1, int(roll_info.max_value) + 1))

    for i in xrange(roll_info.num_rolls):
        if roll_info.advantage is None:
            yield roll()
        elif roll_info.advantage == ADVANTAGE:
            yield AdvantagedRoll(roll(), roll())
        elif roll_info.advantage == DISADVANTAGE:
            yield DisadvantagedRoll(roll(), roll())
        else:
            raise RuntimeError()

def sum_rolls(rolls):
    values = []
    for roll in rolls:
        if isinstance(roll, Roll):
            values.append(roll.value())
        else:
            values.append(roll)
    return sum(values)

def main():
    last_roll_data = None
    while True:
        try:
            raw = raw_input("> ")
        except EOFError:
            return

        if raw.lower() == "help":
            print "Enter desired rolls in format XdY+Z"
            print "    Ex: 3d5, 5d6+9, 1d7-2, d9"
            print
            print "Append adv, advantage, dis, or disadvantage"
            print "    Ex: d20+8 adv, d10 advantage, d20 dis"
            print
            print "Append crit or critical"
            print "    Ex: 3d8+5 crit, d4 crit"
            print
            print "Type !crit to retroactively crit your last rolls"
            continue
        elif raw.strip() == "!crit":
            if last_roll_data is None:
                print "!crit - <error: no previous roll, type help for info>"
                continue

            for rolls, roll_info in last_roll_data:
                result = (sum_rolls(rolls) * 2 + roll_info.plus)
                print "{} - {} (rolls: {})".format(roll_info.input, result, rolls)

            continue
        elif raw.strip() == "":
            continue

        last_roll_data = []
        for roll_info in parse_input(raw):
            if isinstance(roll_info, basestring):
                print "{} - <error: invalid input, type help for info>".format(roll_info)
                continue

            rolls = list(make_rolls(roll_info))
            last_roll_data.append((rolls, roll_info))

            result = (sum_rolls(rolls) * (2 if roll_info.critical else 1) +
                      roll_info.plus)
            print "{} - {} (rolls: {})".format(roll_info.input, result, rolls)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass

    print
